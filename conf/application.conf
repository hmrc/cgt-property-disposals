# Copyright 2020 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"
include "tax_years.conf"

# This is the main configuration file for the application.
# ~~~~~

appName=cgt-property-disposals

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.MicroserviceModule"
play.http.filters = "uk.gov.hmrc.play.bootstrap.filters.MicroserviceFilters"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Akka-based Poller to control DMS submission throughput
play.modules.enabled += "uk.gov.hmrc.cgtpropertydisposals.module.DmsSubmissionModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.http.JsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoHmrcModule"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="TIquQ9Gzs9h8wkeAphCLfgIqqogqixXsOhHfNF4S1ksqGrA14sCz5xCFoSWRWBGe"

# Session configuration
# ~~~~~
application.session.httpOnly=false
application.session.secure=false

# The application languages
# ~~~~~
application.langs="en"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
application.router=prod.Routes


# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {

  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  uk.gov.hmrc.cgtpropertydisposals.controllers.MicroserviceHelloWorld = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }

}


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
    name = ${appName}
    rateUnit = SECONDS
    durationUnit = SECONDS
    showSamples = true
    jvm = true
    enabled = true
}

# Microservice specific config

auditing {
    enabled=false
    traceRequests=true
    consumer {
        baseUri {
            host = localhost
            port = 8100
        }
    }
}


mongodb {
    uri = "mongodb://localhost:27017/cgt-property-disposals"
    draft-returns {
        expiry-time =30days
        max-draft-returns = 10
    }
    upscan {
        expiry-time = 7days
    }
}

mongo-async-driver {
  akka {
    log-dead-letters-during-shutdown = off
    log-dead-letters = 0
  }
}

microservice {
    metrics {
        graphite {
            host = graphite
            port = 2003
            prefix = play.${appName}.
            enabled = false
        }
    }

    services {

        auth {
            host = localhost
            port = 8500
        }

        business-partner-record {
            host = localhost
            port = 7022
        }

        email {
            host = localhost
            port = 8300
        }

        register-without-id {
            host = localhost
            port = 7022
        }

        subscription {
            host = localhost
            port = 7022
        }

        returns {
            host = localhost
            port = 7022
        }

        tax-enrolments {
            host = localhost
            port = 9995
        }

        gform {
            host = localhost
            port = 7022
        }

    }
}

des {
    bearer-token = "test"
    environment  = "test"
}

email {
    account-created {
        template-id = "cgtpd_account_created"
    }
    return-submitted {
        template-id = "cgtpd_submission_confirmation"
    }
}

dms {
    queue-name = "queue-name"
    b64-business-area = "YnVzaW5lc3MtYXJlYQ=="
    submission-poller {
        jitter-period = 5 seconds
        initial-delay = 10 minutes
        interval = 120 seconds
        failure-count-limit = 50
        in-progress-retry-after = 5000 # milliseconds as required by work-item-repo library
        mongo {
            ttl = 7 days
        }
    }
    backscan.enabled = true
}

dms-submission-poller-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

s3 {
    file-download-timeout = 2 minutes
    upstream-element-limit-scale-factor = 200 # do not adjust
    max-file-download-size-in-mb = 5
}

httpHeadersWhitelist=["Accept-Language"]
